<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://esinew.github.io/</id>
    <title>每一步都是新生</title>
    <updated>2020-07-10T08:42:37.007Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://esinew.github.io/"/>
    <link rel="self" href="https://esinew.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://esinew.github.io/images/avatar.png</logo>
    <icon>https://esinew.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 每一步都是新生</rights>
    <entry>
        <title type="html"><![CDATA[AnnotationConfigApplicationContext和实例化对象的调用方式的区别]]></title>
        <id>https://esinew.github.io/post/annotationconfigapplicationcontext-he-shi-li-hua-dui-xiang-de-diao-yong-fang-shi-de-qu-bie/</id>
        <link href="https://esinew.github.io/post/annotationconfigapplicationcontext-he-shi-li-hua-dui-xiang-de-diao-yong-fang-shi-de-qu-bie/">
        </link>
        <updated>2020-07-10T08:41:25.000Z</updated>
        <content type="html"><![CDATA[<p>AnnotationConfigApplicationContext使用的是声明式引用，声明一个变量，并不会分配一个完整的对象所需要的内存空间，只是将对象名所代表的变量看成是一个引用变量，并为它分配所需内存空间，它所占用的空间远远小于一个类的对象所需要的空间。</p>
<p>而实例化的过程就是为对象分配内存空间的过程，此时，对象才成为类的实例。new所执行的具体操作是调用相应类中的构造方法（包括祖先类的构造方法），来完成内存分配以及变量的初始化工作，然后将<strong>分配的内存地址</strong>返回给所定义的变量。</p>
<p>缺点：AnnotationConfigApplicationContext的运行速度要比实例化慢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ jvm垃圾收集器]]></title>
        <id>https://esinew.github.io/post/jvm-la-ji-shou-ji-qi/</id>
        <link href="https://esinew.github.io/post/jvm-la-ji-shou-ji-qi/">
        </link>
        <updated>2020-07-09T13:41:48.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://esinew.github.io//post-images/1594302276635.jpg" alt="" loading="lazy"><br>
垃圾收集器在JDK1.8之前有七个，JDK11更新了<strong>ZGC</strong>收集器。</p>
<p><strong>Serial</strong>（Client模式下）是最基本的垃圾收集器使用的是<strong>复制算法</strong>，且为单线程，用于新生代（新生代存活对象少，只需要复制少量对象即可），垃圾回收过程中需要暂停其他所有线程。</p>
<p><strong>ParNew</strong>（Server模式下）是<strong>Serial</strong>的多线程版本，虽然是多线程，但是当有线程开始清除垃圾时仍需要暂停其他所有线程。</p>
<p><strong>Parallel Scavenge</strong>（多线程）同样用于新生代，采用的也是复制算法。和上述不同的是<strong>Parallel Scavenge</strong>重点关注的是如何工作能使程序达到一个可控的高吞吐量。高吞吐量可以最高效率的利用CPU时间，尽快的完成程序的运算任务，适用于后台运算而不需要太多交互的任务。（自适应调节策略）。</p>
<p><u><em>吞吐量=运行代码的时间/（运行代码的时间+垃圾收集时间）</em></u></p>
<p><strong>Serial Old</strong>老年代、单线程、标记-整理算法。</p>
<p><strong>Parallel Old</strong>老年代、多线程、标记-整理算法。为老年代提供高吞吐量（JDK1.6），通常<strong>Parallel Scavenge</strong>搭配<strong>Parallel Old</strong>。</p>
<p><strong>CMS</strong>（多线程标记清除算法Concurrent mark sweep）老年代，主要目的是<em>获取最短垃圾回收停顿时间</em>。工作过程分为四个阶段：</p>
<p>1.初始标记：标记GC Roots直接关联的对象，速度快，仍需暂停所用工作线程。</p>
<p>2.并发标记：GC Roots 跟踪，不需要暂停工作线程。（并发）</p>
<p>3.重新标记：修正在并发标记期间因为用户程序继续运行而导致标记产生的那一部分对象的标记记录（暂停所用工作线程）。</p>
<p>4.并发清除：清除GC Roots不可达对象（并发）。</p>
<p>其中2、4时间最长</p>
<figure data-type="image" tabindex="1"><img src="https://esinew.github.io//post-images/1594302261968.jpg" alt="" loading="lazy"></figure>
<p><strong>G1收集器</strong>（jDK1.8最好的收集器）</p>
<p>有以下优点：</p>
<p>1.标记-整理算法，不产生内存碎片。</p>
<p>2.可以非常精确的控制停顿时间，在不牺牲吞吐量的前提下，实现低停顿垃圾的垃圾回收。</p>
<p><em>实现原理</em>：将内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾最多的区域。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[G1收集器与ZGC收集器]]></title>
        <id>https://esinew.github.io/post/g1-shou-ji-qi-yu-zgc-shou-ji-qi/</id>
        <link href="https://esinew.github.io/post/g1-shou-ji-qi-yu-zgc-shou-ji-qi/">
        </link>
        <updated>2020-07-09T12:15:11.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>转载：云大的博客https://www.wangxinshuo.cn/2018/09/09/g1%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8Ezgc%E6%94%B6%E9%9B%86%E5%99%A8/</p>
<p>G1收集器<br>
前言</p>
<p>具有的特性：</p>
<ul>
<li>
<p>像CMS收集器一样能够进行并发执行</p>
</li>
<li>
<p>不牺牲大量的吞吐性能</p>
</li>
<li>
<p>不需要更大的Heap</p>
</li>
<li>
<p>可预测的GC时间<br>
与CMS相比具有以下优点：</p>
</li>
<li>
<p>G1会在GC过程中进行整理内存，因此不会产生太多内存碎片</p>
</li>
<li>
<p>G1的STW（Stop The World）更可控，用户可以指定可期望的GC停顿时间<br>
G1中的重要概念<br>
Region</p>
<p>传统的内存划分为新生代、老年代、永久代（在JDK8中以metaspace取而代之）<br>
传统内存区域划分<br>
在G1中将内存区域划分为多个不连续的区域（Region），每个Region内部是连续的。<br>
G1收集器内存划分<br>
<img src="https://esinew.github.io//post-images/1594297078292.png" alt="" loading="lazy"><br>
在上图中，我们注意到还有一些Region标明了H，它代表Humongous，这表示这些Region存储的是巨大对象（humongous object，H-obj），即大小大于等于region一半的对象。<br>
一个Region的大小可以通过参数-XX:G1HeapRegionSize设定，取值范围从1M到32M，且是2的指数。如果不设定，那么G1会根据Heap大小自动决定。</p>
</li>
</ul>
<p>SATB</p>
<p>全称是Snapshot-At—The-Beginning，译为：GC回收前（存活对象）快照。它是通过Root Tracing得到的，作用是维持并发GC的正确性。<br>
三色标记法</p>
<pre><code>白：对象没有被标记到，标记阶段结束后，会被当做垃圾回收掉。
灰：对象被标记了，但是它的field还没有被标记或标记完。
黑：对象被标记了，且它的所有field也被标记完了。
</code></pre>
<p>RSet</p>
<p>全称是Remembered Set，是辅助GC过程的一种结构，典型的空间换时间工具，和Card Table有些类似。还有一种数据结构也是辅助GC的：Collection Set（CSet），它记录了GC要收集的Region集合，集合里的Region可以是任意年代的。在GC的时候，对于old-&gt;young和old-&gt;old的跨代对象引用，只要扫描对应的CSet中的RSet即可。逻辑上说每个Region都有一个RSet，RSet记录了其他Region中的对象引用本Region中对象的关系，属于points-into结构（谁引用了我的对象）。而Card Table则是一种points-out（我引用了谁的对象）的结构，每个Card 覆盖一定范围的Heap（一般为512Bytes）。G1的RSet是在Card Table的基础上实现的：每个Region会记录下别的Region有指向自己的指针，并标记这些指针分别在哪些Card的范围内。 这个RSet其实是一个Hash Table，Key是别的Region的起始地址，Value是一个集合，里面的元素是Card Table的Index。<br>
下图表示了RSet、Card和Region的关系<br>
<img src="https://esinew.github.io//post-images/1594297180298.jpg" alt="" loading="lazy"><br>
Pause Prediction Model</p>
<p>G1 GC是一个响应时间优先的GC算法，它与CMS最大的不同是，用户可以设定整个GC过程的期望停顿时间，参数-XX:MaxGCPauseMillis指定一个G1收集过程目标停顿时间，默认值200ms，不过它不是硬性条件，只是期望值。那么G1怎么满足用户的期望呢？就需要这个停顿预测模型了。G1根据这个模型统计计算出来的历史数据来预测本次收集需要选择的Region数量，从而尽量满足用户设定的目标停顿时间。停顿预测模型是以衰减标准偏差为理论基础实现的：</p>
<p>//  share/vm/gc_implementation/g1/g1CollectorPolicy.hpp<br>
double get_new_prediction(TruncatedSeq* seq) {<br>
return MAX2(seq-&gt;davg() + sigma() * seq-&gt;dsd(),<br>
seq-&gt;davg() * confidence_factor(seq-&gt;num()));<br>
}<br>
/*<br>
在这个预测计算公式中：davg表示衰减均值，sigma()返回一个系数，表示信赖度，dsd表示衰减标准偏差，confidence_factor表示可信度相关系数。而方法的参数TruncateSeq，顾名思义，是一个截断的序列，它只跟踪了序列中的最新的n个元素。<br>
*/</p>
<p>Young GC</p>
<p>Young GC：选定所有年轻代里的Region。通过控制年轻代的region个数，即年轻代内存大小，来控制young GC的时间开销。<br>
Mixed GC</p>
<p>Mixed GC：选定所有年轻代里的Region，外加根据global concurrent marking统计得出收集收益高的若干老年代Region。在用户指定的开销目标范围内尽可能选择收益高的老年代Region。<br>
由上面的描述可知，Mixed GC不是full GC，它只能回收部分老年代的Region，如果mixed GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行Mixed GC，就会使用serial old GC（full GC）来收集整个GC heap。所以我们可以知道，G1是不提供full GC的。<br>
ZGC收集器<br>
简介</p>
<p>Z垃圾收回器，也被称为 ZGC, 是一种可伸缩的低延迟垃圾收集器。<br>
目标</p>
<pre><code>垃圾回收停顿时间不超过10ms
无论是相对小的堆(几百MB)还是大堆(TB级)都能应对自如
与G1相比，吞吐量下降不超过15%
方便日后在此基础上实现新的gc特性、利用colored pointers(译者注：暂时翻译为彩色指针)和读屏障进一步优化收集器
</code></pre>
<p>ZGC描述</p>
<p>大体上来说，ZGC是一种并发的、不分代的、基于Region且支持NUMA的压缩收集器。因为只会在枚举根节点的阶段STW, 因此停顿时间不会随着堆大小或存活对象的多少而增加。</p>
<p>ZGC的一个核心设计就是读屏障与彩色指针(colored object pointers, 缩写, colored oops)组合起来使用总体来说是一种利用64位指针中未使用的bit来保存元数据的指针)。这是ZGC可以与用户线程并发执行的原因。从Java的线程角度来看，读取Java对应中的引用变量的操作属于一种读屏障。与单纯的取对象内存地址相比，使用读屏障可以利用彩色指针中包含的信息来决定在允许Java线程读取指针的地址值之前是否需要执行一些操作。例如，对象可能被垃圾收集器移动过了，这时读屏障就可以感知到这种情况并执行一些必要的行为。</p>
<p>跟其它的可选方案相比，我们认为使用彩色指针模式有一些非常吸引人的优势，比如：<br>
– 这允许我们在移动对象/整理内存阶段，在指向可回收/重用区域的指针确定之前回收/重用这部分内存。(原文: It allows us to reclaim and reuse memory during the relocation/compaction phase, before pointers pointing into the reclaimed/reused regions have been fixed.)。这有利于降低堆的开销。这同时也意味着我们不需要再实现一个单独的标记-整理算法用于处理Full GC。<br>
– 这允许我们使用相对来说更少量、更简单的GC屏障。这可以降低JVM运行时的性能开销。同时也可以让JVM字节码解释器和JIT编译器中的GC代码更加容易实现和优化。<br>
– 我们目前会在彩色指针中保存与标记和重定位相关的数据。不过，只要彩色指针中还有足够的未使用的bit, 我们还可以在里面存储更多对读屏障有用的信息。我们认为这为未来实现更多的特性奠定了良好的基础。比如，在复杂多变的内存环境下，我们可以在彩色指针中存储一些追踪信息来让垃圾回收器在移动对象时能将低频次使用的对象移动到不常访问的内存区域(译者注：原文为 cold storage)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java面试常考的 BIO，NIO，AIO 总结]]></title>
        <id>https://esinew.github.io/post/java-mian-shi-chang-kao-de-bionioaio-zong-jie/</id>
        <link href="https://esinew.github.io/post/java-mian-shi-chang-kao-de-bionioaio-zong-jie/">
        </link>
        <updated>2020-07-08T13:59:37.000Z</updated>
        <content type="html"><![CDATA[<p>转载：JavaGuide<br>
目录：</p>
<pre><code>1. BIO (Blocking I/O)

    1.1 传统 BIO

    1.2 伪异步 IO

    1.3 代码示例

    1.4 总结

2. NIO (New I/O)

    2.1 NIO 简介

    2.2 NIO的特性/NIO与IO区别

        1)Non-blocking IO（非阻塞IO）

        2)Buffer(缓冲区)

        3)Channel (通道)

        4)Selectors(选择器)

    2.3 NIO 读数据和写数据方式

    2.4 NIO核心组件简单介绍

    2.5 代码示例

3. AIO (Asynchronous I/O)

参考
</code></pre>
<p>BIO,NIO,AIO 总结</p>
<p>Java 中的 BIO、NIO和 AIO 理解为是 Java 语言对操作系统的各种 IO 模型的封装。程序员在使用这些 API 的时候，不需要关心操作系统层面的知识，也不需要根据不同操作系统编写不同的代码。只需要使用Java的API就可以了。</p>
<p>在讲 BIO,NIO,AIO 之前先来回顾一下这样几个概念：同步与异步，阻塞与非阻塞。</p>
<p>同步与异步</p>
<pre><code>同步： 同步就是发起一个调用后，被调用者未处理完请求之前，调用不返回。

异步： 异步就是发起一个调用后，立刻得到被调用者的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常依靠事件，回调等机制来通知调用者其返回结果。
</code></pre>
<p>同步和异步的区别最大在于异步的话调用者不需要等待处理结果，被调用者会通过回调等机制来通知调用者其返回结果。</p>
<p>阻塞和非阻塞</p>
<pre><code>阻塞： 阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。

非阻塞： 非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。
</code></pre>
<p>那么同步阻塞、同步非阻塞和异步非阻塞又代表什么意思呢？</p>
<p>举个生活中简单的例子，你妈妈让你烧水，小时候你比较笨啊，在哪里傻等着水开（同步阻塞）。等你稍微再长大一点，你知道每次烧水的空隙可以去干点其他事，然后只需要时不时来看看水开了没有（同步非阻塞）。后来，你们家用上了水开了会发出声音的壶，这样你就只需要听到响声后就知道水开了，在这期间你可以随便干自己的事情，你需要去倒水了（异步非阻塞）。</p>
<ol>
<li>BIO (Blocking I/O)</li>
</ol>
<p>同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。<br>
1.1 传统 BIO</p>
<p>BIO通信（一请求一应答）模型图如下(图源网络，原出处不明)：</p>
<p>采用 BIO 通信模型 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在 while(true) 循环中服务端会调用 accept() 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成， 不过可以通过多线程来支持多个客户端的连接，如上图所示。</p>
<p>如果要让 BIO 通信模型 能够同时处理多个客户端请求，就必须使用多线程（主要原因是 socket.accept()、 socket.read()、 socket.write() 涉及的三个主要函数都是同步阻塞的），也就是说它在接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完成之后，通过输出流返回应答给客户端，线程销毁。这就是典型的 一请求一应答通信模型 。我们可以设想一下如果这个连接不做任何事情的话就会造成不必要的线程开销，不过可以通过 线程池机制 改善，线程池还可以让线程的创建和回收成本相对较低。使用FixedThreadPool 可以有效的控制了线程的最大数量，保证了系统有限的资源的控制，实现了N(客户端请求数量):M(处理客户端请求的线程数量)的伪异步I/O模型（N 可以远远大于 M），下面一节&quot;伪异步 BIO&quot;中会详细介绍到。</p>
<p>我们再设想一下当客户端并发访问量增加后这种模型会出现什么问题？</p>
<p>在 Java 虚拟机中，线程是宝贵的资源，线程的创建和销毁成本很高，除此之外，线程的切换成本也是很高的。尤其在 Linux 这样的操作系统中，线程本质上就是一个进程，创建和销毁线程都是重量级的系统函数。如果并发访问量增加会导致线程数急剧膨胀可能会导致线程堆栈溢出、创建新线程失败等问题，最终导致进程宕机或者僵死，不能对外提供服务。<br>
1.2 伪异步 IO</p>
<p>为了解决同步阻塞I/O面临的一个链路需要一个线程处理的问题，后来有人对它的线程模型进行了优化一一一后端通过一个线程池来处理多个客户端的请求接入，形成客户端个数M：线程池最大线程数N的比例关系，其中M可以远远大于N.通过线程池可以灵活地调配线程资源，设置线程的最大值，防止由于海量并发接入导致线程耗尽。</p>
<p>伪异步IO模型图(图源网络，原出处不明)：</p>
<p>采用线程池和任务队列可以实现一种叫做伪异步的 I/O 通信框架，它的模型图如上图所示。当有新的客户端接入时，将客户端的 Socket 封装成一个Task（该任务实现java.lang.Runnable接口）投递到后端的线程池中进行处理，JDK 的线程池维护一个消息队列和 N 个活跃线程，对消息队列中的任务进行处理。由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</p>
<p>伪异步I/O通信框架采用了线程池实现，因此避免了为每个请求都创建一个独立线程造成的线程资源耗尽问题。不过因为它的底层任然是同步阻塞的BIO模型，因此无法从根本上解决问题。<br>
1.3 代码示例</p>
<p>下面代码中演示了BIO通信（一请求一应答）模型。我们会在客户端创建多个线程依次连接服务端并向其发送&quot;当前时间+:hello world&quot;，服务端会为每个客户端线程创建一个线程来处理。代码示例出自闪电侠的博客，原地址如下：</p>
<p>https://www.jianshu.com/p/a4e03835921a</p>
<p>客户端</p>
<pre><code>/**
*
* @author 闪电侠
* @date 2018年10月14日
* @Description:客户端
*/
 
public class IOClient {
 
 
 
   public static void main(String[] args) {
 
       // TODO 创建多个线程，模拟多个客户端连接服务端
 
       new Thread(() -&gt; {
 
           try {
 
               Socket socket = new Socket(&quot;127.0.0.1&quot;, 3333);
 
               while (true) {
 
                   try {
 
                       socket.getOutputStream().write((new Date() + &quot;: hello world&quot;).getBytes());
 
                       Thread.sleep(2000);
 
                   } catch (Exception e) {
 
                   }
 
               }
 
           } catch (IOException e) {
 
           }
 
       }).start();
 
 
 
   }
 
 
 
}
</code></pre>
<p>服务端</p>
<pre><code>/**
* @author 闪电侠
* @date 2018年10月14日
* @Description: 服务端
*/
 
public class IOServer {
 
 
 
   public static void main(String[] args) throws IOException {
 
       // TODO 服务端处理客户端连接请求
 
       ServerSocket serverSocket = new ServerSocket(3333);
 
 
 
       // 接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理
 
       new Thread(() -&gt; {
 
           while (true) {
 
               try {
 
                   // 阻塞方法获取新的连接
 
                   Socket socket = serverSocket.accept();
 
 
 
                   // 每一个新的连接都创建一个线程，负责读取数据
 
                   new Thread(() -&gt; {
 
                       try {
 
                           int len;
 
                           byte[] data = new byte[1024];
 
                           InputStream inputStream = socket.getInputStream();
 
                           // 按字节流方式读取数据
 
                           while ((len = inputStream.read(data)) != -1) {
 
                               System.out.println(new String(data, 0, len));
 
                           }
 
                       } catch (IOException e) {
 
                       }
 
                   }).start();
 
 
 
               } catch (IOException e) {
 
               }
 
 
 
           }
 
       }).start();
 
 
 
   }
 
 
 
}
</code></pre>
<p>1.4 总结</p>
<p>在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。<br>
2. NIO (New I/O)<br>
2.1 NIO 简介</p>
<p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p>
<p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。<br>
2.2 NIO的特性/NIO与IO区别</p>
<p>如果是在面试中回答这个问题，我觉得首先肯定要从 NIO 流是非阻塞 IO 而 IO 流是阻塞 IO 说起。然后，可以从 NIO 的3个核心组件/特性为 NIO 带来的一些改进来分析。如果，你把这些都回答上了我觉得你对于 NIO 就有了更为深入一点的认识，面试官问到你这个问题，你也能很轻松的回答上来了。</p>
<p>1)Non-blocking IO（非阻塞IO）</p>
<p>IO流是阻塞的，NIO流是不阻塞的。</p>
<p>Java NIO使我们可以进行非阻塞IO操作。比如说，单线程中从通道读取数据到buffer，同时可以继续做别的事情，当数据读取到buffer中后，线程再继续处理数据。写数据也是一样的。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</p>
<p>Java IO的各种流是阻塞的。这意味着，当一个线程调用 read() 或 write() 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了</p>
<p>2)Buffer(缓冲区)</p>
<p>IO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)。</p>
<p>Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，体现了新库与原I/O的一个重要区别。在面向流的I/O中·可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。</p>
<p>在NIO厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的; 在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p>
<p>最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了ByteBuffer,还有其他的一些缓冲区，事实上，每一种Java基本类型（除了Boolean类型）都对应有一种缓冲区。</p>
<p>3)Channel (通道)</p>
<p>NIO 通过Channel（通道） 进行读写。</p>
<p>通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。</p>
<p>4)Selectors(选择器)</p>
<p>NIO有选择器，而IO没有。</p>
<p>选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。</p>
<p>2.3 NIO 读数据和写数据方式</p>
<p>通常来说NIO中的所有IO都是从 Channel（通道） 开始的。</p>
<pre><code>从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。

从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。
</code></pre>
<p>数据读取和写入操作图示：</p>
<p>2.4 NIO核心组件简单介绍</p>
<p>NIO 包含下面几个核心的组件：</p>
<pre><code>Channel(通道)

Buffer(缓冲区)

Selector(选择器)
</code></pre>
<p>整个NIO体系包含的类远远不止这三个，只能说这三个是NIO体系的“核心API”。我们上面已经对这三个概念进行了基本的阐述，这里就不多做解释了。<br>
2.5 代码示例</p>
<p>代码示例出自闪电侠的博客，原地址如下：</p>
<p>https://www.jianshu.com/p/a4e03835921a</p>
<p>客户端 IOClient.java 的代码不变，我们对服务端使用 NIO 进行改造。以下代码较多而且逻辑比较复杂，大家看看就好。</p>
<pre><code>/**
*
* @author 闪电侠
* @date 2019年2月21日
* @Description: NIO 改造后的服务端
*/
 
public class NIOServer {
 
   public static void main(String[] args) throws IOException {
 
       // 1. serverSelector负责轮询是否有新的连接，服务端监测到新的连接之后，不再创建一个新的线程，
 
       // 而是直接将新连接绑定到clientSelector上，这样就不用 IO 模型中 1w 个 while 循环在死等
 
       Selector serverSelector = Selector.open();
 
       // 2. clientSelector负责轮询连接是否有数据可读
 
       Selector clientSelector = Selector.open();
 
 
 
       new Thread(() -&gt; {
 
           try {
 
               // 对应IO编程中服务端启动
 
               ServerSocketChannel listenerChannel = ServerSocketChannel.open();
 
               listenerChannel.socket().bind(new InetSocketAddress(3333));
 
               listenerChannel.configureBlocking(false);
 
               listenerChannel.register(serverSelector, SelectionKey.OP_ACCEPT);
 
 
 
               while (true) {
 
                   // 监测是否有新的连接，这里的1指的是阻塞的时间为 1ms
 
                   if (serverSelector.select(1) &gt; 0) {
 
                       Set&lt;SelectionKey&gt; set = serverSelector.selectedKeys();
 
                       Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();
 
 
 
                       while (keyIterator.hasNext()) {
 
                           SelectionKey key = keyIterator.next();
 
 
 
                           if (key.isAcceptable()) {
 
                               try {
 
                                   // (1)
 
                                   // 每来一个新连接，不需要创建一个线程，而是直接注册到clientSelector
 
                                   SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();
 
                                   clientChannel.configureBlocking(false);
 
                                   clientChannel.register(clientSelector, SelectionKey.OP_READ);
 
                               } finally {
 
                                   keyIterator.remove();
 
                               }
 
                           }
 
 
 
                       }
 
                   }
 
               }
 
           } catch (IOException ignored) {
 
           }
 
       }).start();
 
       new Thread(() -&gt; {
 
           try {
 
               while (true) {
 
                   // (2) 批量轮询是否有哪些连接有数据可读，这里的1指的是阻塞的时间为 1ms
 
                   if (clientSelector.select(1) &gt; 0) {
 
                       Set&lt;SelectionKey&gt; set = clientSelector.selectedKeys();
 
                       Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();
 
 
 
                       while (keyIterator.hasNext()) {
 
                           SelectionKey key = keyIterator.next();
 
 
 
                           if (key.isReadable()) {
 
                               try {
 
                                   SocketChannel clientChannel = (SocketChannel) key.channel();
 
                                   ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
 
                                   // (3) 面向 Buffer
 
                                   clientChannel.read(byteBuffer);
 
                                   byteBuffer.flip();
 
                                   System.out.println(
 
                                           Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());
 
                               } finally {
 
                                   keyIterator.remove();
 
                                   key.interestOps(SelectionKey.OP_READ);
 
                               }
 
                           }
 
 
 
                       }
 
                   }
 
               }
 
           } catch (IOException ignored) {
 
           }
 
       }).start();
 
 
 
   }
 
}
</code></pre>
<p>为什么大家都不愿意用 JDK 原生 NIO 进行开发呢？从上面的代码中大家都可以看出来，是真的难用！除了编程复杂、编程模型难之外，它还有以下让人诟病的问题：</p>
<pre><code>JDK 的 NIO 底层由 epoll 实现，该实现饱受诟病的空轮询 bug 会导致 cpu 飙升 100%

项目庞大之后，自行实现的 NIO 很容易出现各类 bug，维护成本较高，上面这一坨代码我都不能保证没有 bug
</code></pre>
<p>Netty 的出现很大程度上改善了 JDK 原生 NIO 所存在的一些让人难以忍受的问题。<br>
3. AIO (Asynchronous I/O)</p>
<p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p>
<p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。（除了 AIO 其他的 IO 类型都是同步的，这一点可以从底层IO线程模型解释，推荐一篇文章：《漫话：如何给女朋友解释什么是Linux的五种IO模型？》 ）</p>
<p>查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。<br>
参考</p>
<pre><code>《Netty 权威指南》第二版

https://zhuanlan.zhihu.com/p/23488863 (美团技术团队)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[集合线程安全问题]]></title>
        <id>https://esinew.github.io/post/ji-he-xian-cheng-an-quan-wen-ti/</id>
        <link href="https://esinew.github.io/post/ji-he-xian-cheng-an-quan-wen-ti/">
        </link>
        <updated>2020-07-06T16:49:30.000Z</updated>
        <content type="html"><![CDATA[<p><strong>集合线程安全问题</strong></p>
<figure data-type="image" tabindex="1"><img src="https://esinew.github.io//post-images/1594054356639.png" alt="" loading="lazy"></figure>
<p>List用Vector或者加锁：</p>
<pre><code>Collection.synchronizedList(new ArrayList&lt;&gt;());
</code></pre>
<pre><code>Collections.synchronizedSet(new HashSet&lt;&gt;());
</code></pre>
<pre><code>Collections.synchronizedMap(new HashMap&lt;&gt;());
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[索引]]></title>
        <id>https://esinew.github.io/post/suo-yin/</id>
        <link href="https://esinew.github.io/post/suo-yin/">
        </link>
        <updated>2020-07-06T10:46:36.000Z</updated>
        <content type="html"><![CDATA[<p><strong>索引基础</strong></p>
<p>索引：排好序的快速查找数据结构；<br>
优点：提高数据检索的效率，降低数据排序的成本；<br>
缺点：会降低更新表的速度；</p>
<p>单值索引：一个索引只包含单个列，一个表可以由多个单值索引；<br>
唯一索引：索引列的值必须唯一，允许有空值；<br>
复合索引：即一个索引包含多个列；</p>
<p>索引结构：<br>
BTree索引，Hash索引，full-text全文索引，R-Tree索引；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BIO,NIO,AIO整理]]></title>
        <id>https://esinew.github.io/post/bionioaio-zheng-li/</id>
        <link href="https://esinew.github.io/post/bionioaio-zheng-li/">
        </link>
        <updated>2020-07-03T15:29:27.000Z</updated>
        <content type="html"><![CDATA[<p>以银行取款为例：</p>
<pre><code>同步 ： 自己亲自出马持银行卡到银行取钱（使用同步IO时，Java自己处理IO读写）。

异步 ： 委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO时，Java将IO读写委托给OS处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS需要支持异步IO操作API）。

阻塞 ： ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）。

非阻塞 ： 柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器会通知可读写时再继续进行读写，不断循环直到读写完成）。
</code></pre>
<p>Java对BIO、NIO、AIO的支持：</p>
<pre><code>Java BIO (blocking I/O)： 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。

Java NIO (non-blocking I/O)： 同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。

Java AIO(NIO.2) (Asynchronous I/O) ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理，
</code></pre>
<p>BIO、NIO、AIO适用场景分析:</p>
<pre><code>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。

NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。

AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[http1.1和http2的比较]]></title>
        <id>https://esinew.github.io/post/http11-he-http2-de-bi-jiao/</id>
        <link href="https://esinew.github.io/post/http11-he-http2-de-bi-jiao/">
        </link>
        <updated>2020-06-29T17:13:05.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://esinew.github.io//post-images/1593849130260.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[斐波那契算法及其改进]]></title>
        <id>https://esinew.github.io/post/fei-bo-na-qi-suan-fa-ji-qi-gai-jin/</id>
        <link href="https://esinew.github.io/post/fei-bo-na-qi-suan-fa-ji-qi-gai-jin/">
        </link>
        <updated>2020-06-29T17:09:44.000Z</updated>
        <content type="html"><![CDATA[<p>斐波那契算法</p>
<pre><code>Fibonacci(int n){

if(n==1||n==2){

return 1;

}

return Fibonacci(n-1)+Fibonacci(n-2)；

}
</code></pre>
<p>改进（解决溢出问题、性能问题）</p>
<pre><code>private static readonly Dictionary&lt;int,BigInteger&gt; _cach = new Dictionary&lt;int,BigInteger&gt;();
public static BigIneger Fibonacci(int n){
	if(n &lt; = 2){
	return 1;
	}
	if(_cach.TryGetValue(n,out BigInteger result)){
	return result;
	}
	result = Fibonacci(n-1)+Fibonacci(n-2);
	_cach.Add(n,result);
	return result;
	
}
</code></pre>
<p>{f(n), f(n-1), f(n-1), f(n-2)} ={1, 1, 1,0}n-1</p>
<p>(注：{f(n+1), f(n), f(n), f(n-1)}表示一个矩阵。在矩阵中第一行第一列是f(n+1)，第一行第二列是f(n)，第二行第一列是f(n)，第二行第二列是f(n-1)。，如果还不懂的话，再去看一下线性代数)</p>
<p>有了这个公式，要求得f(n)，我们只需要求得矩阵{1, 1, 1,0}的n-1次方，因为矩阵{1, 1, 1,0}的n-1次方的结果的第一行第一列就是f(n)。这个数学公式用数学归纳法不难证明。感兴趣的朋友不妨自己证明一下。<br>
现在的问题转换为求矩阵{1, 1, 1, 0}的乘方。如果简单第从0开始循环，n次方将需要n次运算，并不比前面的方法要快。但我们可以考虑乘方的如下性质：</p>
<p>​    / an/2<em>an/2           n为偶数时<br>
an=<br>
​    \ a(n-1)/2</em>a(n-1)/2      n为奇数时</p>
<p>要求得n次方，我们先求得n/2次方，再把n/2的结果平方一下。如果把求n次方的问题看成一个大问题，把求n/2看成一个较小的问题。这种把大问题分解成一个或多个小问题的思路我们称之为分治法。这样求n次方就只需要logn次运算了。</p>
<p>实现这种方式时，首先需要定义一个2×2的矩阵，并且定义好矩阵的乘法以及乘方运算。当这些运算定义好了之后，剩下的事情就变得非常简单。完整的实现代码如下所示。</p>
<pre><code>struct Matrix2By2
{
      Matrix2By2
      (
            long long m00 = 0, 
            long long m01 = 0, 
            long long m10 = 0, 
            long long m11 = 0
      )
      :m_00(m00), m_01(m01), m_10(m10), m_11(m11) 
      {
      }

      long long m_00;
      long long m_01;
      long long m_10;
      long long m_11;
};

</code></pre>
<pre><code>///////////////////////////////////////////////////////////////////////
// Multiply two matrices
// Input: matrix1 - the first matrix
//        matrix2 - the second matrix
//Output: the production of two matrices
///////////////////////////////////////////////////////////////////////
Matrix2By2 MatrixMultiply
(
      const Matrix2By2&amp; matrix1, 
      const Matrix2By2&amp; matrix2
)
{
      return Matrix2By2(
            matrix1.m_00 * matrix2.m_00 + matrix1.m_01 * matrix2.m_10,
            matrix1.m_00 * matrix2.m_01 + matrix1.m_01 * matrix2.m_11,
            matrix1.m_10 * matrix2.m_00 + matrix1.m_11 * matrix2.m_10,
            matrix1.m_10 * matrix2.m_01 + matrix1.m_11 * matrix2.m_11);
}

///////////////////////////////////////////////////////////////////////
// The nth power of matrix 
// 1  1
// 1  0
///////////////////////////////////////////////////////////////////////
Matrix2By2 MatrixPower(unsigned int n)
{
      assert(n &gt; 0);

      Matrix2By2 matrix;
      if(n == 1)
      {
            matrix = Matrix2By2(1, 1, 1, 0);
      }
      else if(n % 2 == 0)
      {
            matrix = MatrixPower(n / 2);
            matrix = MatrixMultiply(matrix, matrix);
      }
      else if(n % 2 == 1)
      {
            matrix = MatrixPower((n - 1) / 2);
            matrix = MatrixMultiply(matrix, matrix);
            matrix = MatrixMultiply(matrix, Matrix2By2(1, 1, 1, 0));
      }

      return matrix;
}

///////////////////////////////////////////////////////////////////////
// Calculate the nth item of Fibonacci Series using devide and conquer
///////////////////////////////////////////////////////////////////////
long long Fibonacci_Solution3(unsigned int n)
{
      int result[2] = {0, 1};
      if(n &lt; 2)
            return result[n];

      Matrix2By2 PowerNMinus2 = MatrixPower(n - 1);
      return PowerNMinus2.m_00;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybiatis使用MybatisCodeHelperPro插件快速开发]]></title>
        <id>https://esinew.github.io/post/mybiatis-shi-yong-mybatiscodehelperpro-cha-jian-kuai-su-kai-fa/</id>
        <link href="https://esinew.github.io/post/mybiatis-shi-yong-mybatiscodehelperpro-cha-jian-kuai-su-kai-fa/">
        </link>
        <updated>2020-06-28T18:14:31.000Z</updated>
        <content type="html"><![CDATA[<p>（转载自 简书  葛俊_0f97）<br>
如何达到最快的效率 下面是我的开发流程</p>
<p>java类生成crud 不再推荐使用 各种功能没有数据库生成crud 方便 数据库生成crud 在表字段 添加减少字段 合并代码也做得更好</p>
<p>数据库的话 首先要建表 直接写建表语句比较麻烦 我们可以通过java类生成建表语句来生成好</p>
<p>我们先写一个超级简单的java类 啥也不需要加 private也不需要 这个类只是用来生成建表语句</p>
<figure data-type="image" tabindex="1"><img src="https://esinew.github.io//post-images/1593368287814.gif" alt="" loading="lazy"></figure>
<p>mybatis快速开发.gif</p>
<p>生成好了建表语句后 到数据库执行下 然后从数据库来生成crud代码</p>
<p>(使用IDEA高级版的用户直接到IDEA高级版的数据库执行就行)</p>
<p>这时就可以选择各种配置了</p>
<p>在数据库添加 减少字段后 到数据库 重新生成下就好了</p>
<p>当我们数据库用的tinyInt 或者 smallInt这种 生成java类型 是 byte 和 short 两种类型</p>
<p>在java代码里面操作 byte 和 short 类型 比较麻烦 经常需要 强制转换 这是可以配置下 设置 使用Integer 来替代byte和short</p>
<p><img src="https://esinew.github.io//post-images/1593368312200.png" alt="" loading="lazy"><br>
useIntegerInsteadOfByteAndShort.png</p>
<p>在数据库生成crud时 部分用户可能会勾选 生成example 这个选项</p>
<p>我建议使用 方法名生成sql 来替代生成example这个</p>
<p>首先可以避免生成一大堆的example文件 xml中的example代码看起来也很恶心</p>
<p>写方法名生成sql 的效率也比写example来得快</p>
<p>看xml也很清楚 到底进行了啥操作</p>
<p>另外2.5版本 将支持 定制sql 数据库生成crud中 默认生成的那些语句 比如deleteByPrimaryKey 有不需要的可以一开始就给干掉</p>
<p>如果之后要的话 可以从数据库重新来生成 比如batchInsert 这种 只有当前表需要的时候才来生成</p>
<p>另外我也不推荐 mapper接口做继承 现在代码都是自动生成的，mapper做继承仅能减少一些代码量，没有看到什么其他的效率提升。搞了继承后 看mapper接口 对应的xml 也变得比较麻烦 哪些方法要放到继承里面也比较难定义，有可能某些接口继承的方法根本用不到, 我的建议是每个接口 只生成自己需要的xml方法， 比如batchInsert这个，有个表需要 有的表并不需要。</p>
]]></content>
    </entry>
</feed>